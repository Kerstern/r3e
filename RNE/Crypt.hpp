#ifndef CRYPT_HPP
#define CRYPT_HPP

#include <string.h>
#include <stdlib.h>

const unsigned char gCrcTable[256] = {
    0x74, 0x69, 0x74, 0x61, 0x6E, 0x52, 0x4F, 0x53, 0x45, 0x1A, 0x59, 0xF3, 0xBF, 0xC8, 0xF9, 0x1C, 
    0x7B, 0x98, 0x30, 0x03, 0xD0, 0x98, 0xCD, 0xE5, 0x23, 0x16, 0xD2, 0x60, 0x1F, 0x3F, 0x45, 0xDF, 
    0xBF, 0xB5, 0x57, 0x47, 0x15, 0xBA, 0xAF, 0x38, 0x61, 0xED, 0xF1, 0x68, 0xC6, 0xD6, 0x03, 0x7E, 
    0x44, 0x41, 0x45, 0x20, 0x48, 0x41, 0x53, 0x20, 0x53, 0x4D, 0x41, 0x4C, 0x4C, 0x20, 0x57, 0x49, 
    0x4C, 0x4C, 0x59, 0xEF, 0xCA, 0x96, 0x07, 0x4B, 0x4E, 0xE1, 0xEA, 0x7A, 0xA0, 0xDA, 0xDB, 0xD9, 
    0x78, 0xD3, 0x70, 0x5E, 0x83, 0xC3, 0xC9, 0xAE, 0x7B, 0xC8, 0x07, 0x4B, 0xEB, 0xC7, 0x9E, 0xA7, 
    0x49, 0xC2, 0xAE, 0x36, 0x0F, 0x0C, 0xB9, 0xCB, 0x6E, 0xC6, 0x6A, 0xE1, 0xCE, 0xF5, 0xC3, 0x94, 
    0x2B, 0x7D, 0x63, 0xEB, 0x04, 0xD5, 0xB9, 0x46, 0x70, 0xE0, 0xDA, 0xF3, 0x99, 0x97, 0x4D, 0xDD, 
    0x15, 0xFB, 0xF4, 0x4A, 0xF1, 0x10, 0x0E, 0x0B, 0x6E, 0xB8, 0x47, 0x36, 0x23, 0x4D, 0x6B, 0x36, 
    0xA9, 0xBC, 0xBF, 0xC3, 0xF8, 0x01, 0xF7, 0xA2, 0x04, 0x5A, 0x5B, 0x2C, 0x56, 0x77, 0x0F, 0x10, 
    0x43, 0x8F, 0x24, 0x41, 0xD4, 0x98, 0x3C, 0xFD, 0x0F, 0x11, 0x0C, 0xF6, 0xC4, 0x87, 0xF8, 0x6F, 
    0x73, 0x45, 0x63, 0x52, 0x65, 0x54, 0x20, 0x4D, 0x65, 0x53, 0x73, 0x41, 0x67, 0x45, 0x73, 0x20, 
    0x61, 0x72, 0x65, 0x20, 0x66, 0x75, 0x6E, 0xBD, 0xA6, 0xEF, 0x79, 0x03, 0xB1, 0xD2, 0x87, 0x11, 
    0x72, 0x2D, 0x13, 0x57, 0xC8, 0x8D, 0x22, 0xE8, 0x45, 0xAA, 0x2B, 0xEE, 0x1B, 0x91, 0xC6, 0x88, 
    0xDE, 0x83, 0xF9, 0x1C, 0x4C, 0x2E, 0xCE, 0x86, 0x1E, 0x3B, 0x03, 0x22, 0xB8, 0xDE, 0x23, 0x11, 
    0xA5, 0x65, 0x34, 0x49, 0xB9, 0xED, 0x50, 0x4C, 0xC6, 0xC9, 0x61, 0x04, 0xC2, 0x2E, 0x58, 0x3B, 
};

struct CR001 {
	void Init(unsigned int seed){
		mVcSeed = seed;
		mBcSeed = seed;
		mAcSeed = seed;
		mMySeed = seed;
	}

	void SetType(unsigned char type){
		mType = type;
	}

	int R_BC(){
		mBcSeed = 0x8088405 * mBcSeed + 1;
		return mBcSeed / 0x10000;
	}

	int R_AC(){
		mAcSeed = (0x41C64E6D * mAcSeed + 12345) & 0x7FFFFFFF;
		return mAcSeed;
	}

	int R_MY(){
		mMySeed = 0x41C64E6D * mMySeed + 12345;
		return mMySeed / 0x10000;
	}

	int R_VC(){
		mVcSeed = (0x343FD * mVcSeed + 0x269EC3) & 0x7FFFFFFF;
		return mVcSeed / 0x10000;
	}

	int Get(){
		if(mType == 0)
			return R_BC();
		else if(mType == 1)
			return R_AC();
		else if(mType == 2)
			return R_MY();
		else
			return R_VC();
	}

	unsigned char mType;
	int mVcSeed;
	int mBcSeed;
	int mAcSeed;
	int mMySeed;
};

struct HeadCryptedServer {
	unsigned int AddBufferLen2 : 3;
	unsigned int AddTableValue1 : 3;
	unsigned int Command3 : 3;
	unsigned int EncryptValue1 : 3;
	unsigned int AddBufferLen3 : 3;
	unsigned int AddTableValue3 : 3;
	unsigned int Command2 : 3;
	unsigned int AddTableValue4 : 2;
	unsigned int Command1 : 3;
	unsigned int EncryptAddValue1 : 2;
	unsigned int AddBufferLen4 : 2;
	unsigned int EncryptAddValue2 : 2;
	unsigned char AddBufferLen1 : 3;
	unsigned char AddTableValue2 : 3;
	unsigned char Command4 : 2;
};

struct HeadCryptedClient {
	unsigned int Command2 : 3;
	unsigned int AddTableValue2 : 3;
	unsigned int AddBufferLen1 : 3;
	unsigned int AddTableValue3 : 3;
	unsigned int Command1 : 3;
	unsigned int EncryptValue1 : 3;
	unsigned int AddBufferLen2 : 3;
	unsigned int EncryptAddValue2 : 2;
	unsigned int AddBufferLen3 : 3;
	unsigned int AddTableValue4 : 2;
	unsigned int Command4 : 2;
	unsigned int EncryptAddValue1 : 2;
	unsigned char Command3 : 3;
	unsigned char AddTableValue1 : 3;
	unsigned char AddBufferLen4 : 2;
};

struct HeadDecrypted {
	unsigned __int64 AddBufferLen1 : 3;
	unsigned __int64 AddBufferLen2 : 3;
	unsigned __int64 AddBufferLen3 : 3;
	unsigned __int64 AddBufferLen4 : 2;
	unsigned __int64 Command1 : 3;
	unsigned __int64 Command2 : 3;
	unsigned __int64 Command3 : 3;
	unsigned __int64 Command4 : 2;
	unsigned __int64 AddTableValue1 : 3;
	unsigned __int64 AddTableValue2 : 3;
	unsigned __int64 AddTableValue3 : 3;
	unsigned __int64 AddTableValue4 : 2;
	unsigned __int64 EncryptAddValue1 : 2;
	unsigned __int64 EncryptAddValue2 : 2;
	unsigned __int64 EncryptValue1 : 3;
};

struct Head {
	unsigned __int64 AddBufferLen : 11;
	unsigned __int64 Command	: 11;
	unsigned __int64 AddTableValue : 11;
	unsigned __int64 EncryptAddValue : 4;
	unsigned __int64 EncryptValue : 3;
};

class Crypt {
public:
	Crypt();
	~Crypt();

	void Default();
	void Init(unsigned int key);

	bool Find_DupINDEX(unsigned int val, unsigned int range);
	bool Find_DupTABLE(unsigned int val, unsigned int table, unsigned int range);

	void ESSP(unsigned char* buffer);
	int ESCP(unsigned char* buffer, int& key);

	bool DRSB(unsigned char* buffer);
	unsigned short DRSH(unsigned char* buffer);

	bool DRCB(unsigned char* buffer);
	unsigned short DRCH(unsigned char* buffer);

private:
	unsigned int** mCryptTable;
	unsigned short* mCryptIndex;
};

#endif
